#version 460
#extension GL_GOOGLE_include_directive : require

#include "common_gpu.h"

layout(binding = 0, set = 0) buffer data0 { float data[]; }; //
layout(binding = 1, set = 0) buffer dataUBO { TensorProcessorImpl_GPU_UBO_Data ubo; };

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout( push_constant ) uniform kernelArgs
{
  int stride;
  int in_channels;
  int out_channels;
  Variable A;
  Variable kernel;
  Variable res;
  int y_steps; 
  int steps; 
  int x_steps; 
  uint tFlagsMask;    
} kgenArgs;


void main()
{
  bool runThisThread = true;
  ///////////////////////////////////////////////////////////////// prolog
  const int y = int(gl_GlobalInvocationID[0]); 
  const int step = int(gl_GlobalInvocationID[1]); 
  const int x = int(gl_GlobalInvocationID[2]); 
  if(y >= kgenArgs.y_steps + 0 || step >= kgenArgs.steps + 0 || x >= kgenArgs.x_steps + 0)
    runThisThread = false;
    ///////////////////////////////////////////////////////////////// prolog
  if(runThisThread)
  {
  
        int image_n = step / kgenArgs.out_channels;
        int out_ch = step % kgenArgs.out_channels;
        int kw = int((kgenArgs.kernel.sizes[0]))/2; //e.g. 1 for 3x3 and 2 for 5x5
        int kh = int((kgenArgs.kernel.sizes[1]))/2;
        int res_offset = int(kgenArgs.res.offset) + (image_n * kgenArgs.out_channels + out_ch) * kgenArgs.x_steps * kgenArgs.y_steps;

        data[res_offset + kgenArgs.x_steps * y + x] = 0;
        for (int in_ch = 0; in_ch < kgenArgs.in_channels; in_ch++)
        {
          int A_offset = int(kgenArgs.A.offset) + (image_n * kgenArgs.in_channels + in_ch) * int((kgenArgs.A.sizes[0] * kgenArgs.A.sizes[1]));
          int k_offset = int(kgenArgs.kernel.offset) + (out_ch * kgenArgs.in_channels + in_ch) * (2 * kh + 1) * (2 * kw + 1);
          for (int dy = -kh; dy <= kh; dy++)
            for (int dx = -kw; dx <= kw; dx++)
              data[res_offset + kgenArgs.x_steps * y + x] += data[k_offset + (dy + kh) * (2 * kw + 1) + (dx + kw)] * data[A_offset + (kgenArgs.stride * y + kh + dy) * (int(kgenArgs.A.sizes[0])) + (kgenArgs.stride * x + kw + dx)];
          // printf("%u %u %u %f %f\n", res_offset + x_steps*y + x - res.offset, k_offset + (dy+kh)*(2*kw+1) + (dx+kw) - kernel.offset,
          // A_offset + (stride*y + kh + dy)*A.sizes[0] + (stride*x + kw + dx) - A.offset, data[k_offset + (dy+kh)*(2*kw+1) + (dx+kw)], data[A_offset + (stride*y + kh + dy)*A.sizes[0] + (stride*x + kw + dx)]);
        }
      
  }
}


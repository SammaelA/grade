#version 460
#extension GL_GOOGLE_include_directive : require

#include "common_gpu.h"

layout(binding = 0, set = 0) buffer data0 { float data[]; }; //
layout(binding = 1, set = 0) buffer dataUBO { TensorProcessorImpl_GPU_UBO_Data ubo; };

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

layout( push_constant ) uniform kernelArgs
{
  uint total_size;
  uint step_size;
  uint group_size;
  uint Ai_mul;
  Variable A;
  Variable B;
  Variable C;
  uint iNumElementsX; 
  uint steps; 
  uint iNumElementsZ; 
  uint tFlagsMask;    
} kgenArgs;


void main()
{
  bool runThisThread = true;
  ///////////////////////////////////////////////////////////////// prolog
  const uint s1 = uint(gl_GlobalInvocationID[0]); 
  if(s1 >= kgenArgs.iNumElementsX + 0)
    runThisThread = false;
    ///////////////////////////////////////////////////////////////// prolog
  if(runThisThread)
  {
  
    for (uint s2 = 0; s2 < min(AGroupSize, kgenArgs.total_size-s1*AGroupSize); s2++)
    {
    uint s = s1*AGroupSize + s2;
    uint Ai = kgenArgs.Ai_mul & s;
    uint Bi = s / kgenArgs.group_size % kgenArgs.step_size;
    uint Ci = s;
    data[kgenArgs.C.offset + Ci] = data[kgenArgs.A.offset + Ai] <= data[kgenArgs.B.offset + Bi] ? 1.0f : 0.0f;
    }
  
  }
}

